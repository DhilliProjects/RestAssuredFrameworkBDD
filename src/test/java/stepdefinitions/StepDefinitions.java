package stepdefinitions;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;

import java.io.IOException;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;
import resources.APIResources;
import resources.TestDataBuild;
import resources.Utils;

public class StepDefinitions extends Utils {

	RequestSpecification requestSpec;
	ResponseSpecification responseSpec;
	Response response;
	static String place_id; 

	TestDataBuild data = new TestDataBuild();

	@Given("Add Place Payload with {string} {string} {string}")
	public void add_place_payload_with(String name, String language, String address) throws IOException {

		// By inheriting the 'Utils' class, we can directly provide the method of it and return the output without creating an object
		//data.addPlacePayload() from 'TestDataBuild' class
		//requestSpecification() from 'Utils' class
		requestSpec = given().spec(requestSpecification()).body(data.addPlacePayload(name, language, address));

	}


	@When("User calls {string} with {string} HTTP request")
	public void user_calls_with_http_request(String resource, String httpMethod) {

		//Invoking the Constructor from the 'APIResources' enum class with the value of the 'resource'.
		//According to the name provided in the feature file, it'll take the Api resource.
		//Means - We provided 'AddPlaceAPI' in the Feature File line - so accordingly the resource of the AddPlaceAPI from the APIResources' enum class will be automatically taken here.
		//Why this? - To avoid writing the Scenarios othe same Feature File lines again and to use the same line for every related testcase
		//For example, we can use the same line for another testcase by just changing the 'AddPlaceAPI' to 'GetPlaceAPI'.
		//We just provided all the Api Resouces details in the 'APIResources' enum class - helps to avoid creating variables and methods for every resource if there are more no. of resources
		
		APIResources resourceAPI = APIResources.valueOf(resource); //Creating an object for the enum class
		System.out.println(resourceAPI.getResource()); // calling the method from the enum class
		
		//Note: Directly assigning the method itself to a variable or an object is not possible in Java.
		//But assigning the return value of a method call to a variable is perfectly valid.
		responseSpec = responseSpecification();
		
		if(httpMethod.equalsIgnoreCase("POST")) // This 'Post' or 'Get' is what we mention in the feature File line
		{
			response = requestSpec.when().post(resourceAPI.getResource()); //calling the method from the enum class and posting
		}
		else if(httpMethod.equalsIgnoreCase("GET"))
		{
			response = requestSpec.when().get(resourceAPI.getResource());
		}
	}

	@Then("API call is success with status code {int}")
	public void api_call_is_success_with_status_code(Integer int1) {

		assertEquals(response.getStatusCode(), 200);

	}

	@Then("{string} in response body is {string}")
	public void in_response_body_is(String key, String expectedValue) {

		assertEquals(getJsonPath(response, key), expectedValue);
	}
	
	@Then("Verify place_id created maps to {string} using {string}")
	public void verify_place_id_created_maps_to_using(String expectedName, String resource) throws IOException{
		
		place_id = getJsonPath(response, "place_id");
		
		//Here, RequestSpecification details are different. 
		//We are using 'Get Place API' and it don't require body. So, we provided it like this.
		requestSpec = given().spec(requestSpecification()).queryParam("place_id", place_id); 
		
		user_calls_with_http_request(resource, "GET"); //This is the method in this StepDefinition class only - generated by Cucucmber.
		//In Feature File, we have written this line to applicable to any related method. So, we can directly use it for 'getPlaceAPI' or any related
		
		String actualName = getJsonPath(response, "name"); //getting the value of 'name' from the response body from GET method
		assertEquals(actualName, expectedName); //Validating it with the expectedName (name we provided in Feature file Examples - Data driven testing and parameterization)	
	}


	//Another TestCase
	@Given("DeletePlace Payload")
	public void delete_place_payload() throws IOException {
	
		requestSpec = given().spec(requestSpecification()).body(data.deletePlacePayload(place_id));
	}
}

